# BOB Google Maps API v0.6.0 - Production FastAPI Docker Image
# Optimized for cloud deployment with divine architecture
# Made with üôè following Ni·π£kƒÅma Karma Yoga principles

FROM python:3.9-slim as builder

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=0.6.0

# Metadata
LABEL maintainer="Divyanshu Singh Chouhan <divyanshu@abcsteps.com>" \
      version="${VERSION}" \
      description="BOB Google Maps API - FastAPI Production Service" \
      org.opencontainers.image.title="BOB Google Maps API" \
      org.opencontainers.image.description="Enterprise-grade Google Maps scraping API" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.source="https://github.com/div197/BOB-Google-Maps" \
      org.opencontainers.image.url="https://github.com/div197/BOB-Google-Maps" \
      org.opencontainers.image.vendor="Divyanshu Singh Chouhan" \
      org.opencontainers.image.licenses="MIT"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    unzip \
    curl \
    xvfb \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Chrome for Selenium
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Install ChromeDriver
RUN CHROMEDRIVER_VERSION=`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE` \
    && wget -N http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip \
    && unzip chromedriver_linux64.zip \
    && rm chromedriver_linux64.zip \
    && mv chromedriver /usr/local/bin/chromedriver \
    && chmod +x /usr/local/bin/chromedriver

# Create app directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
COPY requirements-api.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir -r requirements-api.txt

# Install Playwright and browsers
RUN pip install playwright \
    && playwright install chromium \
    && playwright install-deps

# Production stage
FROM python:3.9-slim as production

# Copy system dependencies from builder
COPY --from=builder /usr/bin/google-chrome-stable /usr/bin/google-chrome-stable
COPY --from=builder /usr/local/bin/chromedriver /usr/local/bin/chromedriver
COPY --from=builder /opt/google /opt/google
COPY --from=builder /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu
COPY --from=builder /lib/x86_64-linux-gnu /lib/x86_64-linux-gnu

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    xvfb \
    && rm -rf /var/lib/apt/lists/*

# Copy Python environment
COPY --from=builder /usr/local/lib/python3.9/site-packages /usr/local/lib/python3.9/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Set environment variables for production
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    ENVIRONMENT=production \
    HOST=0.0.0.0 \
    PORT=8000

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash --uid 1000 bob \
    && mkdir -p /app \
    && chown -R bob:bob /app

# Switch to non-root user
USER bob
WORKDIR /app

# Copy application code
COPY --chown=bob:bob bob_core/ ./bob_core/
COPY --chown=bob:bob bob_api/ ./bob_api/
COPY --chown=bob:bob pyproject.toml .
COPY --chown=bob:bob README.md .
COPY --chown=bob:bob LICENSE .

# Install BOB in production mode
USER root
RUN pip install -e .
USER bob

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/temp

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Expose port
EXPOSE 8000

# Default command
CMD ["python", "-m", "uvicorn", "bob_api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]

# Usage examples:
# 
# Build:
# docker build -f Dockerfile.api -t bob-api:0.6.0 .
#
# Run development:
# docker run -p 8000:8000 -e ENVIRONMENT=development bob-api:0.6.0
#
# Run production:
# docker run -p 8000:8000 -e ENVIRONMENT=production -e SECRET_KEY=your-secret bob-api:0.6.0
#
# Run with custom config:
# docker run -p 8000:8000 -v $(pwd)/.env:/app/.env bob-api:0.6.0
#
# Health check:
# curl http://localhost:8000/api/v1/health 